// The zombiesplit gRPC protocol.
syntax = "proto3";
package zombiesplit;

// The zombiesplit gRPC service.
//
// The zombiesplit API has a strong command-query separation, so commands
// generally don't return any information.  Instead, use `Observe` to
// subscribe to events, and monitor those.
//
// We give commands separate response messages, just in case this situation
// changes.
service Zombiesplit {
  /*
   * Queries
   */

  // Requests a server info structure.
  //
  // Use this to make sure the protocol is as expected.
  rpc ServerInfo(ServerInfoRequest) returns (ServerInfoResponse) {}

  // Requests an initial dump.
  //
  // Use this before starting the user interface, or if the client has lagged
  // behind its observation stream and needs a full refresh.
  rpc Dump(DumpRequest) returns (DumpResponse) {}

  // Requests an observation stream.
  //
  // Use this to subscribe the client to observations.
  rpc Observe(ObserveRequest) returns (stream Event) {}

  /*
   * Attempt commands
   */

  // Starts a new attempt in the current session.
  rpc NewAttempt(NewAttemptRequest) returns (NewAttemptResponse) {}

  // Pushes a time to a split in the current session.
  rpc Push(PushRequest) returns (PushResponse) {}

  // Pops times from a split in the current session.
  rpc Pop(PopRequest) returns (PopResponse) {}
}

/*
 * Server info
 */

// A server info request.
message ServerInfoRequest {
  // Space for rent
  // This may accept filters later on.
}

// A server info response.
message ServerInfoResponse {
  // Server protocol (not software) semantic version.
  //
  // See the comment at the top of the protobuf description for an indication
  // of the semantic version of the described protocol.
  message Version {
    uint64 major = 1; // Major version number.
    uint64 minor = 2; // Minor version number.
    uint64 patch = 3; // Patch version number.
  }

  string ident = 1;    // The name of the server software.
  Version version = 2; // The version of the server protocol.
}

/*
 * Dump
 */

// A dump request.
message DumpRequest {
  // Space for rent
  // This may accept filters later on.
}

// A dump response.
message DumpResponse {
  // Information about the current run attempt.
  message Attempt {
    // Information about a target.
    message Target {
      string game_sid = 1;      // Short identifier for the game.
      string category_sid = 2;  // Short identifier for the category.
      string game_name = 3;     // Full name for the game.
      string category_name = 4; // Full name for the category.
    }

    // Information about a split in a run attempt.
    //
    // Part of this is metadata about the segment from the database - its
    // identifier, its 'formal' name (eg, how one would refer to it in splits.io
    // and ILs), and its nickname (a separate name added to the split for
    // comedic or cathartic purposes).  For instance, we might have:
    //
    // - sid      = "CC2"
    // - name     = "Collision Chaos 2"
    // - nickname = "'U's of Doom"
    //
    // The other part of the Split is the times for the current attempt.
    message Split {
      string sid = 1;               // Short identifier for the segment.
      string name = 2;              // Full formal name for the segment.
      optional string nickname = 3; // Nickname for the segment, if different from `name`.
      repeated Time times = 4;    // Times for the split.
    }

    Target target = 1;            // Target information.
    AttemptInfo attempt_info = 2; // Current attempt information.
    repeated Split splits = 3;    // Information about a split.
  }

  // Information about the most recent comparison data.
  message Comparison {
    // Segment comparison message.
    message Segment {
      Time split_pb = 1;      // Personal best for this segment.
      Aggregate in_pb_run = 2; // Comparison for this segment in the personal-best run.
    }

    // Pre-computed run-wide totals.
    //
    // These can be optional, as there is a distinction between a zero time
    // (very unlikely but theoretically possible)
    // and a nonexistent time (eg, comparison data is empty).
    message Run {
      optional Time total_in_pb_run = 1; // Precomputed total across all splits in the PB run.
      optional Time sum_of_best = 2;     // Precomputed sum of all split PBs.
    }

    map<string, Segment> segments = 1; // Per-segment comparisons.
    Run run = 2;                       // Pre-computed run-wide totals.
  }

  // Pre-computed split attempt notes.
  //
  // Generally, these form server-side-cached equivalents to the split events
  // mentioned as part of the `Event::Split` message.
  message SplitNote {
    Aggregate aggregate = 1; // Computed aggregate for the split.
    SplitDelta delta = 2;    // Computed delta for the split.
    Pace pace = 3;           // Computed pace for the split.
  }

  // Run total, if one is available.
  message Total {
    Time time = 1;      // The attempt total.
    RunDelta delta = 2; // Delta against the comparison delta at the same point.
  }

  Attempt attempt = 1;              // The attempt state.
  Comparison comparison = 2;        // The most recent comparison.
  map<string, SplitNote> notes = 3; // The most recently pre-computed split notes.
  optional Total total = 4;         // The most recently pre-computed run total.
}

/*
 * Observe
 */

message ObserveRequest {
  // This might contain a mask eventually.
}

// An event that has occurred on the session.
message Event {
  // An event on a split.
  message Split {
    // An event on a split time.
    //
    // This cannot be called Time as it would then clash with Time.
    message SplitTime {
      // Enumeration of types of time event.
      enum Type {
        PUSHED = 0;                // This time was just added to the split.
        ATTEMPT_TOTAL = 1;         // This is the new attempt total for the split.
        COMPARISON_TOTAL = 2;      // This is the new comparison total for the split.
        ATTEMPT_CUMULATIVE = 3;    // This is the new attempt cumulative for the split.
        COMPARISON_CUMULATIVE = 4; // This is the new comparison cumulative for the split.
      }
      Type type = 1; // The type of time event.
      Time time = 2; // The time.
    }

    string sid = 1; // Short ID of the split's segment.

    // Payload of the event.
    oneof payload {
      SplitTime time = 2;   // A new split time has been logged.
      SplitDelta delta = 3; // The split's delta against its comparison has changed.
      Pop pop = 4;          // The split has been popped.
      Pace pace = 5;        // The split has changed pace (pre-computed from the most recent delta).
    }
  }

  // One of the run-wide totals has changed.
  message Total {
    // Enumeration of types of comparison total.
    enum ComparisonType {
      TOTAL_IN_PB_RUN = 0; // Sum of segments in the best whole comparison run.
      SUM_OF_BEST = 1;     // Sum of best segment times in the comparison.
    }

    optional Time value = 1; // The time, if one is logged for this total.
    // Information about what `value` means.
    oneof type {
      ComparisonType comparison = 2; // This is a comparison total.
      RunDelta attempt = 3;          // This is an attempt total; attached is its delta from the comparison total.
    }
  }

  // Payload of the event.
  oneof payload {
    AttemptInfo reset = 1; // A new attempt has started; the new attempt's information follows.
    Split split = 2;       // An event on a split.
    Total total = 3;       // A whole-run total time announcement.
    Pace overallPace = 4;  // A whole-run pace note (pre-calculated from the most recent attempt delta).
  }
}

/*
 * NewAttempt
 */

// A new-attempt request.
// This may accept filters later on.
message NewAttemptRequest {
  bool save = 1; // Should this run be saved to the database?
}

// A new-attempt response.
message NewAttemptResponse {
  // Space for rent
}

/*
 * Push
 */

// A request to push a new time onto a particular split.
message PushRequest {
  uint64 index = 1; // Index of the split.
  Time time = 2;    // Time being pushed.
}

// Response from a PushRequest.
message PushResponse {
  // Space for rent
}

/*
 * Pop
 */

// A request to pop times from a particular split.
message PopRequest {
  uint64 index = 1; // Index of the split.
  Pop type = 2;     // Type of pop.
}

// A response from a pop.
message PopResponse {
  // Space for rent
}

/*
 * Shared
 */

// Attempt information.
//
// This is both sent in dumps as well as whenever a new attempt begins.
message AttemptInfo {
  uint64 total = 1;     // How many attempts have been run so far (ie. one below the current run's number).
  uint64 completed = 2; // How many attempts have been run to completion so far.
}

// A pace note.
//
// This enumeration captures all of the various relationships between an
// attempt time and a comparison time.
//
// For splits, all of the values of Pace are relevant.
//
// For totals, the only relevant values are NONE, BEHIND, and AHEAD.
enum Pace {
  NONE = 0;               // Pacing information not available.
  BEHIND = 1;             // Behind comparison.
  BEHIND_BUT_GAINING = 2; // Behind comparison but making up time.
  AHEAD_BUT_LOSING = 3;   // Ahead of comparison but losing time.
  AHEAD = 4;              // Ahead of comparison.
  PERSONAL_BEST = 5;      // A new personal best (implicitly ahead).
}

// Delta information for a split.
message SplitDelta {
  Time split = 1; // Delta (attempt - comparison) between split-level times.
  Time run = 2;   // Delta (attempt - comparison) between run-level times.
}

// A delta between attempt and comparison run times.
message RunDelta {
  Time value = 1; // Delta (attempt - comparison).
}

// Types of pop modification.
enum Pop {
  ONE = 0; // Pop the most recent time from this split.
  ALL = 1; // Pop all times from the split.
}

// Split aggregate information message.
message Aggregate {
  Time split = 1;      // Timing for this split only.
  Time cumulative = 2; // Precomputed cumulative timing.
}

// An individual time (technically, an instant/duration).
//
// Times are signed, both to allow for the expression of deltas and 'fix ups' to segments.
message Time {
  int32 millis = 1; // Milliseconds.
}
