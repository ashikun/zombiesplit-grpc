// The zombiesplit gRPC protocol.
syntax = "proto3";
package zombiesplit;

// The zombiesplit gRPC service.
//
// The zombiesplit API has a strong command-query separation, so commands
// generally don't return any information.  Instead, use `Observe` to
// subscribe to events, and monitor those.
//
// We give commands separate response messages, just in case this situation
// changes.
service Zombiesplit {
  /*
   * Queries
   */

  // Requests a server info structure.
  //
  // Use this to make sure the protocol is as expected.
  rpc ServerInfo(ServerInfoRequest) returns (ServerInfoResponse) {}

  // Requests an initial dump.
  //
  // Use this before starting the user interface, or if the client has lagged
  // behind its observation stream and needs a full refresh.
  rpc Dump(DumpRequest) returns (DumpResponse) {}

  // Requests an observation stream.
  //
  // Use this to subscribe the client to observations.
  rpc Observe(ObserveRequest) returns (stream Event) {}

  /*
   * Commands
   */

  // Starts a new attempt in the current session.
  rpc NewAttempt(NewAttemptRequest) returns (NewAttemptResponse) {}

  // Pushes a time to a split in the current session.
  rpc Push(PushRequest) returns (PushResponse) {}

  // Pops times from a split in the current session.
  rpc Pop(PopRequest) returns (PopResponse) {}
}

//
// Server info
//

// A server info request.
message ServerInfoRequest {
  // Space for rent
  // This may accept filters later on.
}

// A server info response.
message ServerInfoResponse {
  // Server semantic version.
  message Version {
    uint64 major = 1; // Major version number.
    uint64 minor = 2; // Minor version number.
    uint64 patch = 3; // Patch version number.
  }

  string ident = 1;    // The name of the server software.
  Version version = 2; // The version of the server.
}

//
// Dump
//

// A dump request.
message DumpRequest {
  // Space for rent
  // This may accept filters later on.
}

// A dump response.
message DumpResponse {
  // Information about the current run attempt.
  message Attempt {
    // Information about a game/category.
    message GameCategory {
      string game_sid = 1;      // Short identifier for the game.
      string category_sid = 2;  // Short identifier for the category.
      string game_name = 3;     // Full name for the game.
      string category_name = 4; // Full name for the category.
    }
    // Information about a split marker.
    message Split {
      string sid = 1;            // Short identifier for the split.
      string name = 2;           // Full name for the split.
      repeated uint32 times = 3; // Times for the split.
    }

    GameCategory game_category = 1; // Game/category information.
    AttemptInfo attempt_info = 2;   // Current attempt information.
    repeated Split splits = 3;      // Information about a split.
  }

  // Information about the most recent comparison data.
  message Comparison {
    // Split comparison message.
    message Split {
      /// The personal best for this split, if any.
      ///
      /// Any splits that compare quicker than this time get the `PersonalBest`
      /// pace.
      uint32 split_pb = 1;     // Personal best for this split.
      Aggregate in_pb_run = 2; // Comparison for this split in the personal-best run.
    }

    // Pre-computed run-wide totals.
    //
    // These can be optional, as there is a distinction between a zero time (very unlikely but theoretically possible)
    // and a nonexistent time (eg, comparison data is empty).
    message Run {
      optional uint32 total_in_pb_run = 1; // Precomputed total across all splits in the PB run.
      optional uint32 sum_of_best = 2;     // Precomputed sum of all split PBs.
    }

    map<string, Split> splits = 1; // Per-split comparisons.
    Run run = 2;                   // Pre-computed run-wide totals.
  }

  // Pre-computed split attempt notes.
  message SplitNote {
    Aggregate aggregate = 1; // Computed aggregate for the split.
    Pace pace = 2;           // Computed pace for the split.
  }


  Attempt attempt = 1;              // The attempt state.
  Comparison comparison = 2;        // The most recent comparison.
  map<string, SplitNote> notes = 3; // The most recently pre-computed split notes.
  Pace pace = 4;                    // The most recently pre-computed total pace.
  optional uint32 total = 5;        // The most recently pre-computed total time.
}

//
// Observe
//

message ObserveRequest {
  // This might contain a mask eventually.
}

// An event that has occurred on the session.
message Event {
  // An event on a split.
  message Split {
    // An event on a split time.
    message Time {
      // Enumeration of types of time event.
      enum Type {
        PUSHED = 0;                // This time was just added to the split.
        ATTEMPT_TOTAL = 2;         // This is the new attempt total for the split.
        COMPARISON_TOTAL = 3;      // This is the new comparison total for the split.
        ATTEMPT_CUMULATIVE = 4;    // This is the new attempt total for the split.
        COMPARISON_CUMULATIVE = 5; // This is the new comparison total for the split.
      }
      Type type = 1;   // The type of time event.
      uint32 time = 2; // The time, in milliseconds.
    }

    string sid = 1; // Short ID of the split.

    // Payload of the event.
    oneof payload {
      Time time = 2;  // A new split time has been logged.
      Pace pace = 3;  // The split has been re-paced.
      Pop pop = 4;    // The split has been popped.
    }
  }

  // One of the run-wide totals has changed.
  message Total {
    // Enumeration of types of comparison total.
    enum ComparisonType {
      TOTAL_IN_PB_RUN = 0; // Sum of segments in the best whole comparison run.
      SUM_OF_BEST = 1;     // Sum of best segment times in the comparison.
    }

    optional uint32 value = 1; // The time, in milliseconds, if one is logged for this total.
    // Information about what `value` means.
    oneof type {
      ComparisonType comparison = 2; // This is a comparison total.
      Pace attempt = 3;              // This is an attempt total with the given pace.
    }
  }

  // Payload of the event.
  oneof payload {
    AttemptInfo reset = 1; // A new attempt has started; the new attempt's information follows.
    Split split = 2;       // An event on a split.
    Total total = 3;       // A whole-run total time announcement.
  }
}

//
// NewAttempt
//

// A new-attempt request.
// This may accept filters later on.
message NewAttemptRequest {
  bool save = 1; // Should this run be saved to the database?
}

// A new-attempt response.
message NewAttemptResponse {
  // Space for rent
}

//
// Push
//

// A request to push a new time onto a particular split.
message PushRequest {
  uint64 index = 1; // Index of the split.
  uint32 time = 2;  // Time being pushed, in milliseconds.
}

// Response from a PushRequest.
message PushResponse {
  // Space for rent
}

//
// Pop
//

// A request to pop times from a particular split.
message PopRequest {
  uint64 index = 1; // Index of the split.
  Pop type = 2;     // Type of pop.
}

// A response from a pop.
message PopResponse {
  // Space for rent
}

//
// Shared
//

// Attempt information.
//
// This is both sent in dumps as well as whenever a new attempt begins.
message AttemptInfo {
  uint64 total = 1; // How many attempts have been run so far (ie. one below the current run's number).
  uint64 completed = 2; // How many attempts have been run to completion so far.
}

// A pace note.
enum Pace {
  NONE = 0;               // Pacing information not available.
  BEHIND = 1;             // Behind comparison.
  BEHIND_BUT_GAINING = 2; // Behind comparison but making up time.
  AHEAD_BUT_LOSING = 3;   // Ahead of comparison but losing time.
  AHEAD = 4;              // Ahead of comparison.
  PERSONAL_BEST = 5;      // Split PB.
}

// Types of pop modification.
enum Pop {
  ONE = 0; // Pop the most recent time from this split.
  ALL = 1; // Pop all times from the split.
}

// Split aggregate information message.
message Aggregate {
  uint32 split = 1;      // Timing for this split only.
  uint32 cumulative = 2; // Precomputed cumulative timing.
}
